{"banner":"/*\n * angular-ui-bootstrap\n * http://angular-ui.github.io/bootstrap/\n\n * Version: 0.13.0-SNAPSHOT - 2015-02-13\n * License: MIT\n */\n","files":{"src/bindHtml/bindHtml.js":"angular.module('lx.ui.bootstrap.bindHtml', [])\n\n  .directive('bindHtmlUnsafe', function () {\n    return function (scope, element, attr) {\n      element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);\n      scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {\n        element.html(value || '');\n      });\n    };\n  });\n","src/dateparser/dateparser.js":"angular.module('lx.ui.bootstrap.dateparser', [])\n\n  .service('dateParser', ['$locale', 'orderByFilter', function ($locale, orderByFilter) {\n\n    this.parsers = {};\n\n    var formatCodeToRegex = {\n      'yyyy': {\n        regex: '\\\\d{4}',\n        apply: function (value) {\n          this.year = +value;\n        }\n      },\n      'yy': {\n        regex: '\\\\d{2}',\n        apply: function (value) {\n          this.year = +value + 2000;\n        }\n      },\n      'y': {\n        regex: '\\\\d{1,4}',\n        apply: function (value) {\n          this.year = +value;\n        }\n      },\n      'MMMM': {\n        regex: $locale.DATETIME_FORMATS.MONTH.join('|'),\n        apply: function (value) {\n          this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value);\n        }\n      },\n      'MMM': {\n        regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        apply: function (value) {\n          this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value);\n        }\n      },\n      'MM': {\n        regex: '0[1-9]|1[0-2]',\n        apply: function (value) {\n          this.month = value - 1;\n        }\n      },\n      'M': {\n        regex: '[1-9]|1[0-2]',\n        apply: function (value) {\n          this.month = value - 1;\n        }\n      },\n      'dd': {\n        regex: '[0-2][0-9]{1}|3[0-1]{1}',\n        apply: function (value) {\n          this.date = +value;\n        }\n      },\n      'd': {\n        regex: '[1-2]?[0-9]{1}|3[0-1]{1}',\n        apply: function (value) {\n          this.date = +value;\n        }\n      },\n      'EEEE': {\n        regex: $locale.DATETIME_FORMATS.DAY.join('|')\n      },\n      'EEE': {\n        regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|')\n      }\n    };\n\n    function createParser(format) {\n      var map = [], regex = format.split('');\n\n      angular.forEach(formatCodeToRegex, function (data, code) {\n        var index = format.indexOf(code);\n\n        if (index > -1) {\n          format = format.split('');\n\n          regex[index] = '(' + data.regex + ')';\n          format[index] = '$'; // Custom symbol to define consumed part of format\n          for (var i = index + 1, n = index + code.length; i < n; i++) {\n            regex[i] = '';\n            format[i] = '$';\n          }\n          format = format.join('');\n\n          map.push({index: index, apply: data.apply});\n        }\n      });\n\n      return {\n        regex: new RegExp('^' + regex.join('') + '$'),\n        map: orderByFilter(map, 'index')\n      };\n    }\n\n    this.parse = function (input, format) {\n      if (!angular.isString(input) || !format) {\n        return input;\n      }\n\n      format = $locale.DATETIME_FORMATS[format] || format;\n\n      if (!this.parsers[format]) {\n        this.parsers[format] = createParser(format);\n      }\n\n      var parser = this.parsers[format],\n        regex = parser.regex,\n        map = parser.map,\n        results = input.match(regex);\n\n      if (results && results.length) {\n        var fields = {year: 1900, month: 0, date: 1, hours: 0}, dt;\n\n        for (var i = 1, n = results.length; i < n; i++) {\n          var mapper = map[i - 1];\n          if (mapper.apply) {\n            mapper.apply.call(fields, results[i]);\n          }\n        }\n\n        if (isValid(fields.year, fields.month, fields.date)) {\n          dt = new Date(fields.year, fields.month, fields.date, fields.hours);\n        }\n\n        return dt;\n      }\n    };\n\n    // Check if date is valid for specific month (and year for February).\n    // Month: 0 = Jan, 1 = Feb, etc\n    function isValid(year, month, date) {\n      if (month === 1 && date > 28) {\n        return date === 29 && ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);\n      }\n\n      if (month === 3 || month === 5 || month === 8 || month === 10) {\n        return date < 31;\n      }\n\n      return true;\n    }\n  }]);\n","src/position/position.js":"angular.module('lx.ui.bootstrap.position', [])\n\n/**\n * A set of utility methods that can be use to retrieve position of DOM elements.\n * It is meant to be used where we need to absolute-position DOM elements in\n * relation to other, existing elements (this is the case for tooltips, popovers,\n * typeahead suggestions etc.).\n */\n  .factory('$position', ['$document', '$window', function ($document, $window) {\n\n    function getStyle(el, cssprop) {\n      if (el.currentStyle) { //IE\n        return el.currentStyle[cssprop];\n      } else if ($window.getComputedStyle) {\n        return $window.getComputedStyle(el)[cssprop];\n      }\n      // finally try and get inline style\n      return el.style[cssprop];\n    }\n\n    /**\n     * Checks if a given element is statically positioned\n     * @param element - raw DOM element\n     */\n    function isStaticPositioned(element) {\n      return (getStyle(element, 'position') || 'static' ) === 'static';\n    }\n\n    /**\n     * returns the closest, non-statically positioned parentOffset of a given element\n     * @param element\n     */\n    var parentOffsetEl = function (element) {\n      var docDomEl = $document[0];\n      var offsetParent = element.offsetParent || docDomEl;\n      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent)) {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docDomEl;\n    };\n\n    return {\n      /**\n       * Provides read-only equivalent of jQuery's position function:\n       * http://api.jquery.com/position/\n       */\n      position: function (element) {\n        var elBCR = this.offset(element);\n        var offsetParentBCR = {top: 0, left: 0};\n        var offsetParentEl = parentOffsetEl(element[0]);\n        if (offsetParentEl != $document[0]) {\n          offsetParentBCR = this.offset(angular.element(offsetParentEl));\n          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;\n          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;\n        }\n\n        var boundingClientRect = element[0].getBoundingClientRect();\n        return {\n          width: boundingClientRect.width || element.prop('offsetWidth'),\n          height: boundingClientRect.height || element.prop('offsetHeight'),\n          top: elBCR.top - offsetParentBCR.top,\n          left: elBCR.left - offsetParentBCR.left\n        };\n      },\n\n      /**\n       * Provides read-only equivalent of jQuery's offset function:\n       * http://api.jquery.com/offset/\n       */\n      offset: function (element) {\n        var boundingClientRect = element[0].getBoundingClientRect();\n        return {\n          width: boundingClientRect.width || element.prop('offsetWidth'),\n          height: boundingClientRect.height || element.prop('offsetHeight'),\n          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),\n          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)\n        };\n      },\n\n      /**\n       * Provides coordinates for the targetEl in relation to hostEl\n       */\n      positionElements: function (hostEl, targetEl, positionStr, appendToBody) {\n\n        var positionStrParts = positionStr.split('-');\n        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';\n\n        var hostElPos,\n          targetElWidth,\n          targetElHeight,\n          targetElPos;\n\n        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);\n\n        targetElWidth = targetEl.prop('offsetWidth');\n        targetElHeight = targetEl.prop('offsetHeight');\n\n        var shiftWidth = {\n          center: function () {\n            return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;\n          },\n          left: function () {\n            return hostElPos.left;\n          },\n          right: function () {\n            return hostElPos.left + hostElPos.width;\n          }\n        };\n\n        var shiftHeight = {\n          center: function () {\n            return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;\n          },\n          top: function () {\n            return hostElPos.top;\n          },\n          bottom: function () {\n            return hostElPos.top + hostElPos.height;\n          }\n        };\n\n        switch (pos0) {\n          case 'right':\n            targetElPos = {\n              top: shiftHeight[pos1](),\n              left: shiftWidth[pos0]()\n            };\n            break;\n          case 'left':\n            targetElPos = {\n              top: shiftHeight[pos1](),\n              left: hostElPos.left - targetElWidth\n            };\n            break;\n          case 'bottom':\n            targetElPos = {\n              top: shiftHeight[pos0](),\n              left: shiftWidth[pos1]()\n            };\n            break;\n          default:\n            targetElPos = {\n              top: hostElPos.top - targetElHeight,\n              left: shiftWidth[pos1]()\n            };\n            break;\n        }\n\n        return targetElPos;\n      }\n    };\n  }]);\n","src/datepicker/datepicker.js":"angular.module('lx.ui.bootstrap.datepicker', ['lx.ui.bootstrap.dateparser', 'lx.ui.bootstrap.position'])\n\n  .constant('datepickerConfig', {\n    formatDay: 'dd',\n    formatMonth: 'MMMM',\n    formatYear: 'yyyy',\n    formatDayHeader: 'EEE',\n    formatDayTitle: 'MMMM yyyy',\n    formatMonthTitle: 'yyyy',\n    datepickerMode: 'day',\n    minMode: 'day',\n    maxMode: 'year',\n    showWeeks: true,\n    startingDay: 0,\n    yearRange: 20,\n    minDate: null,\n    maxDate: null\n  })\n\n  .controller('DatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$timeout', '$log', 'dateFilter', 'datepickerConfig', function ($scope, $attrs, $parse, $interpolate, $timeout, $log, dateFilter, datepickerConfig) {\n    var self = this,\n      ngModelCtrl = {$setViewValue: angular.noop}; // nullModelCtrl;\n\n    // Modes chain\n    this.modes = ['day', 'month', 'year'];\n\n    // Configuration attributes\n    angular.forEach(['formatDay', 'formatMonth', 'formatYear', 'formatDayHeader', 'formatDayTitle', 'formatMonthTitle',\n      'minMode', 'maxMode', 'showWeeks', 'startingDay', 'yearRange'], function (key, index) {\n      self[key] = angular.isDefined($attrs[key]) ? (index < 8 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key])) : datepickerConfig[key];\n    });\n\n    // Watchable date attributes\n    angular.forEach(['minDate', 'maxDate'], function (key) {\n      if ($attrs[key]) {\n        $scope.$parent.$watch($parse($attrs[key]), function (value) {\n          self[key] = value ? new Date(value) : null;\n          self.refreshView();\n        });\n      } else {\n        self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;\n      }\n    });\n\n    $scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode;\n    $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);\n    this.activeDate = angular.isDefined($attrs.initDate) ? $scope.$parent.$eval($attrs.initDate) : new Date();\n\n    $scope.isActive = function (dateObject) {\n      if (self.compare(dateObject.date, self.activeDate) === 0) {\n        $scope.activeDateId = dateObject.uid;\n        return true;\n      }\n      return false;\n    };\n\n    this.init = function (ngModelCtrl_) {\n      ngModelCtrl = ngModelCtrl_;\n\n      ngModelCtrl.$render = function () {\n        self.render();\n      };\n    };\n\n    this.render = function () {\n      if (ngModelCtrl.$modelValue) {\n        var date = new Date(ngModelCtrl.$modelValue),\n          isValid = !isNaN(date);\n\n        if (isValid) {\n          this.activeDate = date;\n        } else {\n          $log.error('Datepicker directive: \"ng-model\" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');\n        }\n        ngModelCtrl.$setValidity('date', isValid);\n      }\n      this.refreshView();\n    };\n\n    this.refreshView = function () {\n      if (this.element) {\n        this._refreshView();\n\n        var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;\n        ngModelCtrl.$setValidity('date-disabled', !date || (this.element && !this.isDisabled(date)));\n      }\n    };\n\n    this.createDateObject = function (date, format) {\n      var model = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;\n      return {\n        date: date,\n        label: dateFilter(date, format),\n        selected: model && this.compare(date, model) === 0,\n        disabled: this.isDisabled(date),\n        current: this.compare(date, new Date()) === 0\n      };\n    };\n\n    this.isDisabled = function (date) {\n      return ((this.minDate && this.compare(date, this.minDate) < 0) || (this.maxDate && this.compare(date, this.maxDate) > 0) || ($attrs.dateDisabled && $scope.dateDisabled({\n        date: date,\n        mode: $scope.datepickerMode\n      })));\n    };\n\n    // Split array into smaller arrays\n    this.split = function (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    };\n\n    $scope.select = function (date) {\n      if ($scope.datepickerMode === self.minMode) {\n        var dt = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date(0, 0, 0, 0, 0, 0, 0);\n        dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n        ngModelCtrl.$setViewValue(dt);\n        ngModelCtrl.$render();\n      } else {\n        self.activeDate = date;\n        $scope.datepickerMode = self.modes[self.modes.indexOf($scope.datepickerMode) - 1];\n      }\n    };\n\n    $scope.move = function (direction) {\n      var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),\n        month = self.activeDate.getMonth() + direction * (self.step.months || 0);\n      self.activeDate.setFullYear(year, month, 1);\n      self.refreshView();\n    };\n\n    $scope.toggleMode = function (direction) {\n      direction = direction || 1;\n\n      if (($scope.datepickerMode === self.maxMode && direction === 1) || ($scope.datepickerMode === self.minMode && direction === -1)) {\n        return;\n      }\n\n      $scope.datepickerMode = self.modes[self.modes.indexOf($scope.datepickerMode) + direction];\n    };\n\n    // Key event mapper\n    $scope.keys = {\n      13: 'enter',\n      32: 'space',\n      33: 'pageup',\n      34: 'pagedown',\n      35: 'end',\n      36: 'home',\n      37: 'left',\n      38: 'up',\n      39: 'right',\n      40: 'down'\n    };\n\n    var focusElement = function () {\n      $timeout(function () {\n        self.element[0].focus();\n      }, 0, false);\n    };\n\n    // Listen for focus requests from popup directive\n    $scope.$on('datepicker.focus', focusElement);\n\n    $scope.keydown = function (evt) {\n      var key = $scope.keys[evt.which];\n\n      if (!key || evt.shiftKey || evt.altKey) {\n        return;\n      }\n\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (key === 'enter' || key === 'space') {\n        if (self.isDisabled(self.activeDate)) {\n          return; // do nothing\n        }\n        $scope.select(self.activeDate);\n        focusElement();\n      } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {\n        $scope.toggleMode(key === 'up' ? 1 : -1);\n        focusElement();\n      } else {\n        self.handleKeyDown(key, evt);\n        self.refreshView();\n      }\n    };\n  }])\n\n  .directive('datepicker', function () {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: 'template/datepicker/datepicker.html',\n      scope: {\n        datepickerMode: '=?',\n        dateDisabled: '&'\n      },\n      require: ['datepicker', '?^ngModel'],\n      controller: 'DatepickerController',\n      link: function (scope, element, attrs, ctrls) {\n        var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];\n\n        if (ngModelCtrl) {\n          datepickerCtrl.init(ngModelCtrl);\n        }\n      }\n    };\n  })\n\n  .directive('daypicker', ['dateFilter', function (dateFilter) {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: 'template/datepicker/day.html',\n      require: '^datepicker',\n      link: function (scope, element, attrs, ctrl) {\n        scope.showWeeks = ctrl.showWeeks;\n\n        ctrl.step = {months: 1};\n        ctrl.element = element;\n\n        var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        function getDaysInMonth(year, month) {\n          return ((month === 1) && (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0))) ? 29 : DAYS_IN_MONTH[month];\n        }\n\n        function getDates(startDate, n) {\n          var dates = new Array(n), current = new Date(startDate), i = 0;\n          current.setHours(12); // Prevent repeated dates because of timezone bug\n          while (i < n) {\n            dates[i++] = new Date(current);\n            current.setDate(current.getDate() + 1);\n          }\n          return dates;\n        }\n\n        ctrl._refreshView = function () {\n          var year = ctrl.activeDate.getFullYear(),\n            month = ctrl.activeDate.getMonth(),\n            firstDayOfMonth = new Date(year, month, 1),\n            difference = ctrl.startingDay - firstDayOfMonth.getDay(),\n            numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : -difference,\n            firstDate = new Date(firstDayOfMonth);\n\n          if (numDisplayedFromPreviousMonth > 0) {\n            firstDate.setDate(-numDisplayedFromPreviousMonth + 1);\n          }\n\n          // 42 is the number of days on a six-month calendar\n          var days = getDates(firstDate, 42);\n          for (var i = 0; i < 42; i++) {\n            days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {\n              secondary: days[i].getMonth() !== month,\n              uid: scope.uniqueId + '-' + i\n            });\n          }\n\n          scope.labels = new Array(7);\n          for (var j = 0; j < 7; j++) {\n            scope.labels[j] = {\n              abbr: dateFilter(days[j].date, ctrl.formatDayHeader),\n              full: dateFilter(days[j].date, 'EEEE')\n            };\n          }\n\n          scope.title = dateFilter(ctrl.activeDate, ctrl.formatDayTitle);\n          scope.rows = ctrl.split(days, 7);\n\n          if (scope.showWeeks) {\n            scope.weekNumbers = [];\n            var numWeeks = scope.rows.length;\n            for (var r = 0; r < numWeeks; r++) {\n              scope.weekNumbers.push(getISO8601WeekNumber(scope.rows[r][3].date));\n            }\n          }\n        };\n\n        ctrl.compare = function (date1, date2) {\n          return (new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate()) );\n        };\n\n        function getISO8601WeekNumber(date) {\n          var checkDate = new Date(date);\n          checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday\n          var time = checkDate.getTime();\n          checkDate.setMonth(0); // Compare with Jan 1\n          checkDate.setDate(1);\n          return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;\n        }\n\n        ctrl.handleKeyDown = function (key, evt) {\n          var date = ctrl.activeDate.getDate();\n\n          if (key === 'left') {\n            date = date - 1;   // up\n          } else if (key === 'up') {\n            date = date - 7;   // down\n          } else if (key === 'right') {\n            date = date + 1;   // down\n          } else if (key === 'down') {\n            date = date + 7;\n          } else if (key === 'pageup' || key === 'pagedown') {\n            var month = ctrl.activeDate.getMonth() + (key === 'pageup' ? -1 : 1);\n            ctrl.activeDate.setMonth(month, 1);\n            date = Math.min(getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth()), date);\n          } else if (key === 'home') {\n            date = 1;\n          } else if (key === 'end') {\n            date = getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth());\n          }\n          ctrl.activeDate.setDate(date);\n        };\n\n        ctrl.refreshView();\n      }\n    };\n  }])\n\n  .directive('monthpicker', ['dateFilter', function (dateFilter) {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: 'template/datepicker/month.html',\n      require: '^datepicker',\n      link: function (scope, element, attrs, ctrl) {\n        ctrl.step = {years: 1};\n        ctrl.element = element;\n\n        ctrl._refreshView = function () {\n          var months = new Array(12),\n            year = ctrl.activeDate.getFullYear();\n\n          for (var i = 0; i < 12; i++) {\n            months[i] = angular.extend(ctrl.createDateObject(new Date(year, i, 1), ctrl.formatMonth), {\n              uid: scope.uniqueId + '-' + i\n            });\n          }\n\n          scope.title = dateFilter(ctrl.activeDate, ctrl.formatMonthTitle);\n          scope.rows = ctrl.split(months, 3);\n        };\n\n        ctrl.compare = function (date1, date2) {\n          return new Date(date1.getFullYear(), date1.getMonth()) - new Date(date2.getFullYear(), date2.getMonth());\n        };\n\n        ctrl.handleKeyDown = function (key, evt) {\n          var date = ctrl.activeDate.getMonth();\n\n          if (key === 'left') {\n            date = date - 1;   // up\n          } else if (key === 'up') {\n            date = date - 3;   // down\n          } else if (key === 'right') {\n            date = date + 1;   // down\n          } else if (key === 'down') {\n            date = date + 3;\n          } else if (key === 'pageup' || key === 'pagedown') {\n            var year = ctrl.activeDate.getFullYear() + (key === 'pageup' ? -1 : 1);\n            ctrl.activeDate.setFullYear(year);\n          } else if (key === 'home') {\n            date = 0;\n          } else if (key === 'end') {\n            date = 11;\n          }\n          ctrl.activeDate.setMonth(date);\n        };\n\n        ctrl.refreshView();\n      }\n    };\n  }])\n\n  .directive('yearpicker', ['dateFilter', function (dateFilter) {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: 'template/datepicker/year.html',\n      require: '^datepicker',\n      link: function (scope, element, attrs, ctrl) {\n        var range = ctrl.yearRange;\n\n        ctrl.step = {years: range};\n        ctrl.element = element;\n\n        function getStartingYear(year) {\n          return parseInt((year - 1) / range, 10) * range + 1;\n        }\n\n        ctrl._refreshView = function () {\n          var years = new Array(range);\n\n          for (var i = 0, start = getStartingYear(ctrl.activeDate.getFullYear()); i < range; i++) {\n            years[i] = angular.extend(ctrl.createDateObject(new Date(start + i, 0, 1), ctrl.formatYear), {\n              uid: scope.uniqueId + '-' + i\n            });\n          }\n\n          scope.title = [years[0].label, years[range - 1].label].join(' - ');\n          scope.rows = ctrl.split(years, 5);\n        };\n\n        ctrl.compare = function (date1, date2) {\n          return date1.getFullYear() - date2.getFullYear();\n        };\n\n        ctrl.handleKeyDown = function (key, evt) {\n          var date = ctrl.activeDate.getFullYear();\n\n          if (key === 'left') {\n            date = date - 1;   // up\n          } else if (key === 'up') {\n            date = date - 5;   // down\n          } else if (key === 'right') {\n            date = date + 1;   // down\n          } else if (key === 'down') {\n            date = date + 5;\n          } else if (key === 'pageup' || key === 'pagedown') {\n            date += (key === 'pageup' ? -1 : 1) * ctrl.step.years;\n          } else if (key === 'home') {\n            date = getStartingYear(ctrl.activeDate.getFullYear());\n          } else if (key === 'end') {\n            date = getStartingYear(ctrl.activeDate.getFullYear()) + range - 1;\n          }\n          ctrl.activeDate.setFullYear(date);\n        };\n\n        ctrl.refreshView();\n      }\n    };\n  }])\n\n  .constant('datepickerPopupConfig', {\n    datepickerPopup: 'yyyy-MM-dd',\n    currentText: 'Today',\n    clearText: 'Clear',\n    closeText: 'Done',\n    closeOnDateSelection: true,\n    appendToBody: false,\n    showButtonBar: true\n  })\n\n  .directive('datepickerPopup', ['$compile', '$parse', '$document', '$position', 'dateFilter', 'dateParser', 'datepickerPopupConfig',\n    function ($compile, $parse, $document, $position, dateFilter, dateParser, datepickerPopupConfig) {\n      return {\n        restrict: 'EA',\n        require: 'ngModel',\n        scope: {\n          isOpen: '=?',\n          currentText: '@',\n          clearText: '@',\n          closeText: '@',\n          dateDisabled: '&'\n        },\n        link: function (scope, element, attrs, ngModel) {\n          var dateFormat,\n            closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection,\n            appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;\n\n          scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;\n\n          scope.getText = function (key) {\n            return scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];\n          };\n\n          attrs.$observe('datepickerPopup', function (value) {\n            dateFormat = value || datepickerPopupConfig.datepickerPopup;\n            ngModel.$render();\n          });\n\n          // popup element used to display calendar\n          var popupEl = angular.element('<div datepicker-popup-wrap><div datepicker></div></div>');\n          popupEl.attr({\n            'ng-model': 'date',\n            'ng-change': 'dateSelection()'\n          });\n\n          function cameltoDash(string) {\n            return string.replace(/([A-Z])/g, function ($1) {\n              return '-' + $1.toLowerCase();\n            });\n          }\n\n          // datepicker element\n          var datepickerEl = angular.element(popupEl.children()[0]);\n          if (attrs.datepickerOptions) {\n            angular.forEach(scope.$parent.$eval(attrs.datepickerOptions), function (value, option) {\n              datepickerEl.attr(cameltoDash(option), value);\n            });\n          }\n\n          scope.watchData = {};\n          angular.forEach(['minDate', 'maxDate', 'datepickerMode'], function (key) {\n            if (attrs[key]) {\n              var getAttribute = $parse(attrs[key]);\n              scope.$parent.$watch(getAttribute, function (value) {\n                scope.watchData[key] = value;\n              });\n              datepickerEl.attr(cameltoDash(key), 'watchData.' + key);\n\n              // Propagate changes from datepicker to outside\n              if (key === 'datepickerMode') {\n                var setAttribute = getAttribute.assign;\n                scope.$watch('watchData.' + key, function (value, oldvalue) {\n                  if (value !== oldvalue) {\n                    setAttribute(scope.$parent, value);\n                  }\n                });\n              }\n            }\n          });\n          if (attrs.dateDisabled) {\n            datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');\n          }\n\n          function parseDate(viewValue) {\n            if (!viewValue) {\n              ngModel.$setValidity('date', true);\n              return null;\n            } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {\n              ngModel.$setValidity('date', true);\n              return viewValue;\n            } else if (angular.isString(viewValue)) {\n              var date = dateParser.parse(viewValue, dateFormat) || new Date(viewValue);\n              if (isNaN(date)) {\n                ngModel.$setValidity('date', false);\n                return undefined;\n              } else {\n                ngModel.$setValidity('date', true);\n                return date;\n              }\n            } else {\n              ngModel.$setValidity('date', false);\n              return undefined;\n            }\n          }\n\n          ngModel.$parsers.unshift(parseDate);\n\n          // Inner change\n          scope.dateSelection = function (dt) {\n            if (angular.isDefined(dt)) {\n              scope.date = dt;\n            }\n            ngModel.$setViewValue(scope.date);\n            ngModel.$render();\n\n            if (closeOnDateSelection) {\n              scope.isOpen = false;\n              element[0].focus();\n            }\n          };\n\n          element.bind('input change keyup', function () {\n            scope.$apply(function () {\n              scope.date = ngModel.$modelValue;\n            });\n          });\n\n          // Outter change\n          ngModel.$render = function () {\n            var date = ngModel.$viewValue ? dateFilter(ngModel.$viewValue, dateFormat) : '';\n            element.val(date);\n            scope.date = parseDate(ngModel.$modelValue);\n          };\n\n          var documentClickBind = function (event) {\n            if (scope.isOpen && event.target !== element[0]) {\n              scope.$apply(function () {\n                scope.isOpen = false;\n              });\n            }\n          };\n\n          var keydown = function (evt, noApply) {\n            scope.keydown(evt);\n          };\n          element.bind('keydown', keydown);\n\n          scope.keydown = function (evt) {\n            if (evt.which === 27) {\n              evt.preventDefault();\n              evt.stopPropagation();\n              scope.close();\n            } else if (evt.which === 40 && !scope.isOpen) {\n              scope.isOpen = true;\n            }\n          };\n\n          scope.$watch('isOpen', function (value) {\n            if (value) {\n              scope.$broadcast('datepicker.focus');\n              scope.position = appendToBody ? $position.offset(element) : $position.position(element);\n              scope.position.top = scope.position.top + element.prop('offsetHeight');\n\n              $document.bind('click', documentClickBind);\n            } else {\n              $document.unbind('click', documentClickBind);\n            }\n          });\n\n          scope.select = function (date) {\n            if (date === 'today') {\n              var today = new Date();\n              if (angular.isDate(ngModel.$modelValue)) {\n                date = new Date(ngModel.$modelValue);\n                date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n              } else {\n                date = new Date(today.setHours(0, 0, 0, 0));\n              }\n            }\n            scope.dateSelection(date);\n          };\n\n          scope.close = function () {\n            scope.isOpen = false;\n            element[0].focus();\n          };\n\n          var $popup = $compile(popupEl)(scope);\n          // Prevent jQuery cache memory leak (template is now redundant after linking)\n          popupEl.remove();\n\n          if (appendToBody) {\n            $document.find('body').append($popup);\n          } else {\n            element.after($popup);\n          }\n\n          scope.$on('$destroy', function () {\n            $popup.remove();\n            element.unbind('keydown', keydown);\n            $document.unbind('click', documentClickBind);\n          });\n        }\n      };\n    }])\n\n  .directive('datepickerPopupWrap', function () {\n    return {\n      restrict: 'EA',\n      replace: true,\n      transclude: true,\n      templateUrl: 'template/datepicker/popup.html',\n      link: function (scope, element, attrs) {\n        element.bind('click', function (event) {\n          event.preventDefault();\n          event.stopPropagation();\n        });\n      }\n    };\n  });\n","src/timepicker/timepicker.js":"angular.module('lx.ui.bootstrap.timepicker', [])\n\n  .constant('timepickerConfig', {\n    hourStep: 1,\n    minuteStep: 1,\n    showMeridian: true,\n    meridians: null,\n    readonlyInput: false,\n    mousewheel: true\n  })\n\n  .controller('TimepickerController', ['$scope', '$attrs', '$parse', '$log', '$locale', 'timepickerConfig', function ($scope, $attrs, $parse, $log, $locale, timepickerConfig) {\n    var selected = new Date(),\n      ngModelCtrl = {$setViewValue: angular.noop}, // nullModelCtrl\n      meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;\n\n    this.init = function (ngModelCtrl_, inputs) {\n      ngModelCtrl = ngModelCtrl_;\n      ngModelCtrl.$render = this.render;\n\n      var hoursInputEl = inputs.eq(0),\n        minutesInputEl = inputs.eq(1);\n\n      var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;\n      if (mousewheel) {\n        this.setupMousewheelEvents(hoursInputEl, minutesInputEl);\n      }\n\n      $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;\n      this.setupInputEvents(hoursInputEl, minutesInputEl);\n    };\n\n    var hourStep = timepickerConfig.hourStep;\n    if ($attrs.hourStep) {\n      $scope.$parent.$watch($parse($attrs.hourStep), function (value) {\n        hourStep = parseInt(value, 10);\n      });\n    }\n\n    var minuteStep = timepickerConfig.minuteStep;\n    if ($attrs.minuteStep) {\n      $scope.$parent.$watch($parse($attrs.minuteStep), function (value) {\n        minuteStep = parseInt(value, 10);\n      });\n    }\n\n    // 12H / 24H mode\n    $scope.showMeridian = timepickerConfig.showMeridian;\n    if ($attrs.showMeridian) {\n      $scope.$parent.$watch($parse($attrs.showMeridian), function (value) {\n        $scope.showMeridian = !!value;\n\n        if (ngModelCtrl.$error.time) {\n          // Evaluate from template\n          var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();\n          if (angular.isDefined(hours) && angular.isDefined(minutes)) {\n            selected.setHours(hours);\n            refresh();\n          }\n        } else {\n          updateTemplate();\n        }\n      });\n    }\n\n    // Get $scope.hours in 24H mode if valid\n    function getHoursFromTemplate() {\n      var hours = parseInt($scope.hours, 10);\n      var valid = ( $scope.showMeridian ) ? (hours > 0 && hours < 13) : (hours >= 0 && hours < 24);\n      if (!valid) {\n        return undefined;\n      }\n\n      if ($scope.showMeridian) {\n        if (hours === 12) {\n          hours = 0;\n        }\n        if ($scope.meridian === meridians[1]) {\n          hours = hours + 12;\n        }\n      }\n      return hours;\n    }\n\n    function getMinutesFromTemplate() {\n      var minutes = parseInt($scope.minutes, 10);\n      return ( minutes >= 0 && minutes < 60 ) ?\n        // add leading 0 to minutes 0-9 to show 2 digit minute value (ex: 07)\n        ((minutes < 10 ) ? '0' + minutes : minutes)\n        : undefined;\n    }\n\n    function pad(value) {\n      return ( angular.isDefined(value) && value.toString().length < 2 ) ? '0' + value : value;\n    }\n\n    // Respond on mousewheel spin\n    this.setupMousewheelEvents = function (hoursInputEl, minutesInputEl) {\n      var isScrollingUp = function (e) {\n        if (e.originalEvent) {\n          e = e.originalEvent;\n        }\n        //pick correct delta variable depending on event\n        var delta = (e.wheelDelta) ? e.wheelDelta : -e.deltaY;\n        return (e.detail || delta > 0);\n      };\n\n      hoursInputEl.bind('mousewheel wheel', function (e) {\n        $scope.$apply((isScrollingUp(e)) ? $scope.incrementHours() : $scope.decrementHours());\n        e.preventDefault();\n      });\n\n      minutesInputEl.bind('mousewheel wheel', function (e) {\n        $scope.$apply((isScrollingUp(e)) ? $scope.incrementMinutes() : $scope.decrementMinutes());\n        e.preventDefault();\n      });\n\n    };\n\n    this.setupInputEvents = function (hoursInputEl, minutesInputEl) {\n      if ($scope.readonlyInput) {\n        $scope.updateHours = angular.noop;\n        $scope.updateMinutes = angular.noop;\n        return;\n      }\n\n      var invalidate = function (invalidHours, invalidMinutes) {\n        ngModelCtrl.$setViewValue(null);\n        ngModelCtrl.$setValidity('time', false);\n        if (angular.isDefined(invalidHours)) {\n          $scope.invalidHours = invalidHours;\n        }\n        if (angular.isDefined(invalidMinutes)) {\n          $scope.invalidMinutes = invalidMinutes;\n        }\n      };\n\n      $scope.updateHours = function () {\n        var hours = getHoursFromTemplate();\n\n        if (angular.isDefined(hours)) {\n          selected.setHours(hours);\n          refresh('h');\n        } else {\n          invalidate(true);\n        }\n      };\n\n      hoursInputEl.bind('blur', function (e) {\n        if (!$scope.invalidHours && $scope.hours < 10) {\n          $scope.$apply(function () {\n            $scope.hours = pad($scope.hours);\n          });\n        }\n      });\n\n      $scope.updateMinutes = function () {\n        var minutes = getMinutesFromTemplate();\n\n        if (angular.isDefined(minutes)) {\n          selected.setMinutes(minutes);\n          refresh('m');\n        } else {\n          invalidate(undefined, true);\n        }\n      };\n\n      minutesInputEl.bind('blur', function (e) {\n        if (!$scope.invalidMinutes && $scope.minutes < 10) {\n          $scope.$apply(function () {\n            $scope.minutes = pad($scope.minutes);\n          });\n        }\n      });\n\n    };\n\n    this.render = function () {\n      var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;\n\n      if (isNaN(date)) {\n        ngModelCtrl.$setValidity('time', false);\n        $log.error('Timepicker directive: \"ng-model\" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');\n      } else {\n        if (date) {\n          selected = date;\n        }\n        makeValid();\n        updateTemplate();\n      }\n    };\n\n    // Call internally when we know that model is valid.\n    function refresh(keyboardChange) {\n      makeValid();\n      ngModelCtrl.$setViewValue(new Date(selected));\n      updateTemplate(keyboardChange);\n    }\n\n    function makeValid() {\n      ngModelCtrl.$setValidity('time', true);\n      $scope.invalidHours = false;\n      $scope.invalidMinutes = false;\n    }\n\n    function updateTemplate(keyboardChange) {\n      var hours = selected.getHours(), minutes = selected.getMinutes();\n\n      if ($scope.showMeridian) {\n        hours = ( hours === 0 || hours === 12 ) ? 12 : hours % 12; // Convert 24 to 12 hour system\n      }\n\n      $scope.hours = keyboardChange === 'h' ? hours : pad(hours);\n      $scope.minutes = keyboardChange === 'm' ? minutes : pad(minutes);\n      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];\n    }\n\n    function addMinutes(minutes) {\n      var dt = new Date(selected.getTime() + minutes * 60000);\n      selected.setHours(dt.getHours(), dt.getMinutes());\n      refresh();\n    }\n\n    $scope.incrementHours = function () {\n      addMinutes(hourStep * 60);\n    };\n    $scope.decrementHours = function () {\n      addMinutes(-hourStep * 60);\n    };\n    $scope.incrementMinutes = function () {\n      addMinutes(minuteStep);\n    };\n    $scope.decrementMinutes = function () {\n      addMinutes(-minuteStep);\n    };\n    $scope.toggleMeridian = function () {\n      addMinutes(12 * 60 * (( selected.getHours() < 12 ) ? 1 : -1));\n    };\n  }])\n\n  .directive('timepicker', function () {\n    return {\n      restrict: 'EA',\n      require: ['timepicker', '?^ngModel'],\n      controller: 'TimepickerController',\n      replace: true,\n      scope: {},\n      templateUrl: 'template/timepicker/timepicker.html',\n      link: function (scope, element, attrs, ctrls) {\n        var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];\n\n        if (ngModelCtrl) {\n          timepickerCtrl.init(ngModelCtrl, element.find('input'));\n        }\n      }\n    };\n  });\n","src/typeahead/typeahead.js":"angular.module('lx.ui.bootstrap.typeahead', ['lx.ui.bootstrap.position', 'lx.ui.bootstrap.bindHtml'])\n\n/**\n * A helper service that can parse typeahead's syntax (string provided by users)\n * Extracted to a separate service for ease of unit testing\n */\n  .factory('typeaheadParser', ['$parse', function ($parse) {\n\n    //                      00000111000000000000022200000000000000003333333333333330000000000044000\n    var TYPEAHEAD_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w\\d]*))\\s+in\\s+([\\s\\S]+?)$/;\n\n    return {\n      parse: function (input) {\n\n        var match = input.match(TYPEAHEAD_REGEXP);\n        if (!match) {\n          throw new Error(\n            'Expected typeahead specification in form of \"_modelValue_ (as _label_)? for _item_ in _collection_\"' +\n            ' but got \"' + input + '\".');\n        }\n\n        return {\n          itemName: match[3],\n          source: $parse(match[4]),\n          viewMapper: $parse(match[2] || match[1]),\n          modelMapper: $parse(match[1])\n        };\n      }\n    };\n  }])\n\n  .directive('typeahead', ['$compile', '$parse', '$q', '$timeout', '$document', '$position', 'typeaheadParser',\n    function ($compile, $parse, $q, $timeout, $document, $position, typeaheadParser) {\n\n      var HOT_KEYS = [9, 13, 27, 38, 40];\n\n      return {\n        require: 'ngModel',\n        link: function (originalScope, element, attrs, modelCtrl) {\n\n          //SUPPORTED ATTRIBUTES (OPTIONS)\n\n          //minimal no of characters that needs to be entered before typeahead kicks-in\n          var minSearch = originalScope.$eval(attrs.typeaheadMinLength);\n          minSearch = minSearch === 0 ? minSearch : minSearch || 1;\n\n          //minimal wait time after last character typed before typehead kicks-in\n          var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;\n\n          //should it restrict model values to the ones selected from the popup only?\n          var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;\n\n          //binding to a variable that indicates if matches are being retrieved asynchronously\n          var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;\n\n          //a callback executed when a match is selected\n          var onSelectCallback = $parse(attrs.typeaheadOnSelect);\n\n          var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;\n\n          var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;\n\n          var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;\n\n          var isFocusAfterSelect = originalScope.$eval(attrs.typeaheadFocusAfterSelect) !== false;\n\n          var leftOffset = originalScope.$eval(attrs.typeaheadPopupLeftOffset) || 0;\n\n          //INTERNAL VARIABLES\n\n          //model setter executed upon match selection\n          var $setModelValue = $parse(attrs.ngModel).assign;\n\n          //expressions used by typeahead\n          var parserResult = typeaheadParser.parse(attrs.typeahead);\n\n          var hasFocus;\n\n          //create a child scope for the typeahead directive so we are not polluting original scope\n          //with typeahead-specific data (matches, query etc.)\n          var scope = originalScope.$new();\n          originalScope.$on('$destroy', function () {\n            scope.$destroy();\n          });\n\n          // WAI-ARIA\n          var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);\n          element.attr({\n            'aria-autocomplete': 'list',\n            'aria-expanded': false,\n            'aria-owns': popupId\n          });\n\n          //pop-up element used to display matches\n          var popUpEl = angular.element('<div typeahead-popup></div>');\n          popUpEl.attr({\n            id: popupId,\n            matches: 'matches',\n            active: 'activeIdx',\n            select: 'select(activeIdx)',\n            query: 'query',\n            position: 'position'\n          });\n          //custom item template\n          if (angular.isDefined(attrs.typeaheadTemplateUrl)) {\n            popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);\n          }\n\n          var resetMatches = function () {\n            scope.matches = [];\n            scope.activeIdx = -1;\n            element.attr('aria-expanded', false);\n          };\n\n          var getMatchId = function (index) {\n            return popupId + '-option-' + index;\n          };\n\n          // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.\n          // This attribute is added or removed automatically when the `activeIdx` changes.\n          scope.$watch('activeIdx', function (index) {\n            if (index < 0) {\n              element.removeAttr('aria-activedescendant');\n            } else {\n              element.attr('aria-activedescendant', getMatchId(index));\n            }\n          });\n\n          var getMatchesAsync = function (inputValue) {\n\n            var locals = {$viewValue: inputValue};\n            isLoadingSetter(originalScope, true);\n            $q.when(parserResult.source(originalScope, locals)).then(function (matches) {\n\n              //it might happen that several async queries were in progress if a user were typing fast\n              //but we are interested only in responses that correspond to the current view value\n              var onCurrentRequest = (inputValue === modelCtrl.$viewValue);\n              if (onCurrentRequest && hasFocus) {\n                if (matches.length > 0) {\n\n                  scope.activeIdx = focusFirst ? 0 : -1;\n                  scope.matches.length = 0;\n\n                  //transform labels\n                  for (var i = 0; i < matches.length; i++) {\n                    locals[parserResult.itemName] = matches[i];\n                    scope.matches.push({\n                      id: getMatchId(i),\n                      label: parserResult.viewMapper(scope, locals),\n                      model: matches[i]\n                    });\n                  }\n\n                  scope.query = inputValue;\n                  //position pop-up with matches - we need to re-calculate its position each time we are opening a window\n                  //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page\n                  //due to other elements being rendered\n                  scope.position = appendToBody ? $position.offset(element) : $position.position(element);\n                  scope.position.top = scope.position.top + element.prop('offsetHeight');\n                  scope.position.left = scope.position.left + leftOffset;\n\n                  element.attr('aria-expanded', true);\n                } else {\n                  resetMatches();\n                }\n              }\n              if (onCurrentRequest) {\n                isLoadingSetter(originalScope, false);\n              }\n            }, function () {\n              resetMatches();\n              isLoadingSetter(originalScope, false);\n            });\n          };\n\n          resetMatches();\n\n          //we need to propagate user's query so we can higlight matches\n          scope.query = undefined;\n\n          //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later\n          var timeoutPromise;\n\n          var scheduleSearchWithTimeout = function (inputValue) {\n            timeoutPromise = $timeout(function () {\n              getMatchesAsync(inputValue);\n            }, waitTime);\n          };\n\n          var cancelPreviousTimeout = function () {\n            if (timeoutPromise) {\n              $timeout.cancel(timeoutPromise);\n            }\n          };\n\n          if (minSearch === 0) {\n            element.bind('focus', function () {\n              hasFocus = true;\n              // We don't wait (using waitTime) since this is on focus and not on key click.\n              getMatchesAsync(modelCtrl.$viewValue);\n            });\n          }\n\n          //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM\n          //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue\n          modelCtrl.$parsers.unshift(function (inputValue) {\n\n            hasFocus = true;\n\n            if (minSearch === 0 || inputValue && inputValue.length >= minSearch) {\n              if (waitTime > 0) {\n                cancelPreviousTimeout();\n                scheduleSearchWithTimeout(inputValue);\n              } else {\n                getMatchesAsync(inputValue);\n              }\n            } else {\n              isLoadingSetter(originalScope, false);\n              cancelPreviousTimeout();\n              resetMatches();\n            }\n\n            if (isEditable) {\n              return inputValue;\n            } else {\n              if (!inputValue) {\n                // Reset in case user had typed something previously.\n                modelCtrl.$setValidity('editable', true);\n                return inputValue;\n              } else {\n                modelCtrl.$setValidity('editable', false);\n                return undefined;\n              }\n            }\n          });\n\n          modelCtrl.$formatters.push(function (modelValue) {\n\n            var candidateViewValue, emptyViewValue;\n            var locals = {};\n\n            if (inputFormatter) {\n\n              locals.$model = modelValue;\n              return inputFormatter(originalScope, locals);\n\n            } else {\n\n              //it might happen that we don't have enough info to properly render input value\n              //we need to check for this situation and simply return model value if we can't apply custom formatting\n              locals[parserResult.itemName] = modelValue;\n              candidateViewValue = parserResult.viewMapper(originalScope, locals);\n              locals[parserResult.itemName] = undefined;\n              emptyViewValue = parserResult.viewMapper(originalScope, locals);\n\n              return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;\n            }\n          });\n\n          scope.select = function (activeIdx) {\n            //called from within the $digest() cycle\n            var locals = {};\n            var model, item;\n\n            locals[parserResult.itemName] = item = scope.matches[activeIdx].model;\n            model = parserResult.modelMapper(originalScope, locals);\n            $setModelValue(originalScope, model);\n            modelCtrl.$setValidity('editable', true);\n\n            onSelectCallback(originalScope, {\n              $item: item,\n              $model: model,\n              $label: parserResult.viewMapper(originalScope, locals)\n            });\n\n            resetMatches();\n\n            //return focus to the input element if a match was selected via a mouse click event\n            // use timeout to avoid $rootScope:inprog error\n            if (isFocusAfterSelect) {\n              $timeout(function () {\n                element[0].focus();\n              }, 0, false);\n            }\n          };\n\n          //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)\n          element.bind('keydown', function (evt) {\n\n            //typeahead is open and an \"interesting\" key was pressed\n            if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {\n              return;\n            }\n\n            // if there's nothing selected (i.e. focusFirst) and enter is hit, don't do anything\n            if (scope.activeIdx == -1 && (evt.which === 13 || evt.which === 9)) {\n              return;\n            }\n\n            evt.preventDefault();\n\n            var i;\n            if (evt.which === 40) {\n              for (i = 0; i < scope.matches.length; i++) {\n                scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;\n                if (!scope.matches[scope.activeIdx].model.notSelectable) {\n                  break;\n                }\n              }\n              scope.$digest();\n\n            } else if (evt.which === 38) {\n              for (i = 0; i < scope.matches.length; i++) {\n                scope.activeIdx = (scope.activeIdx ? scope.activeIdx : scope.matches.length) - 1;\n                if (scope.matches[scope.activeIdx] && !scope.matches[scope.activeIdx].model.notSelectable) {\n                  break;\n                }\n              }\n              scope.$digest();\n\n            } else if (evt.which === 13 || evt.which === 9) {\n              scope.$apply(function () {\n                scope.select(scope.activeIdx);\n              });\n\n              // use timeout to avoid $rootScope:inprog error\n              if (!isFocusAfterSelect) {\n                $timeout(function () {\n                  element[0].blur();\n                }, 0, false);\n              }\n            } else if (evt.which === 27) {\n              evt.stopPropagation();\n\n              resetMatches();\n              scope.$digest();\n            }\n          });\n\n          element.bind('blur', function (evt) {\n            hasFocus = false;\n          });\n\n          // Keep reference to click handler to unbind it.\n          var dismissClickHandler = function (evt) {\n            if (element[0] !== evt.target) {\n              resetMatches();\n              scope.$digest();\n            }\n          };\n\n          $document.bind('click', dismissClickHandler);\n\n          originalScope.$on('$destroy', function () {\n            $document.unbind('click', dismissClickHandler);\n            if (appendToBody) {\n              $popup.remove();\n            }\n          });\n\n          var $popup = $compile(popUpEl)(scope);\n          if (appendToBody) {\n            $document.find('body').append($popup);\n          } else {\n            element.after($popup);\n          }\n        }\n      };\n\n    }])\n\n  .directive('typeaheadPopup', function () {\n    return {\n      restrict: 'EA',\n      scope: {\n        matches: '=',\n        query: '=',\n        active: '=',\n        position: '=',\n        select: '&'\n      },\n      replace: true,\n      templateUrl: 'template/typeahead/typeahead-popup.html',\n      link: function (scope, element, attrs) {\n\n        scope.templateUrl = attrs.templateUrl;\n\n        scope.isOpen = function () {\n          return scope.matches.length > 0;\n        };\n\n        scope.isActive = function (matchIdx) {\n          return scope.active == matchIdx;\n        };\n\n        scope.selectActive = function (matchIdx) {\n          scope.active = matchIdx;\n        };\n\n        scope.selectMatch = function (activeIdx) {\n          scope.select({activeIdx: activeIdx});\n        };\n      }\n    };\n  })\n\n  .directive('typeaheadMatch', ['$http', '$templateCache', '$compile', '$parse', function ($http, $templateCache, $compile, $parse) {\n    return {\n      restrict: 'EA',\n      scope: {\n        index: '=',\n        match: '=',\n        query: '='\n      },\n      link: function (scope, element, attrs) {\n        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'template/typeahead/typeahead-match.html';\n        $http.get(tplUrl, {cache: $templateCache}).success(function (tplContent) {\n          element.replaceWith($compile(tplContent.trim())(scope));\n        });\n      }\n    };\n  }])\n\n  .filter('typeaheadHighlight', function () {\n\n    function escapeRegexp(queryToEscape) {\n      return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n    }\n\n    return function (matchItem, query) {\n      return query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem;\n    };\n  });\n","template/datepicker/datepicker.html.js":"angular.module(\"template/datepicker/datepicker.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/datepicker/datepicker.html\",\n    \"<div ng-switch=\\\"datepickerMode\\\" role=\\\"application\\\" ng-keydown=\\\"keydown($event)\\\">\\n\" +\n    \"  <daypicker ng-switch-when=\\\"day\\\" tabindex=\\\"0\\\"></daypicker>\\n\" +\n    \"  <monthpicker ng-switch-when=\\\"month\\\" tabindex=\\\"0\\\"></monthpicker>\\n\" +\n    \"  <yearpicker ng-switch-when=\\\"year\\\" tabindex=\\\"0\\\"></yearpicker>\\n\" +\n    \"</div>\");\n}]);\n","template/datepicker/day.html.js":"angular.module(\"template/datepicker/day.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/datepicker/day.html\",\n    \"<table role=\\\"grid\\\" aria-labelledby=\\\"{{uniqueId}}-title\\\" aria-activedescendant=\\\"{{activeDateId}}\\\">\\n\" +\n    \"  <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"move(-1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-left\\\"></i></button></th>\\n\" +\n    \"      <th colspan=\\\"{{5 + showWeeks}}\\\"><button id=\\\"{{uniqueId}}-title\\\" role=\\\"heading\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"toggleMode()\\\" tabindex=\\\"-1\\\" style=\\\"width:100%;\\\"><strong>{{title}}</strong></button></th>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-right\\\" ng-click=\\\"move(1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-right\\\"></i></button></th>\\n\" +\n    \"    </tr>\\n\" +\n    \"    <tr>\\n\" +\n    \"      <th ng-show=\\\"showWeeks\\\" class=\\\"text-center\\\"></th>\\n\" +\n    \"      <th ng-repeat=\\\"label in labels track by $index\\\" class=\\\"text-center\\\"><small aria-label=\\\"{{label.full}}\\\">{{label.abbr}}</small></th>\\n\" +\n    \"    </tr>\\n\" +\n    \"  </thead>\\n\" +\n    \"  <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"row in rows track by $index\\\">\\n\" +\n    \"      <td ng-show=\\\"showWeeks\\\" class=\\\"text-center h6\\\"><em>{{ weekNumbers[$index] }}</em></td>\\n\" +\n    \"      <td ng-repeat=\\\"dt in row track by dt.date\\\" class=\\\"text-center\\\" role=\\\"gridcell\\\" id=\\\"{{dt.uid}}\\\" aria-disabled=\\\"{{!!dt.disabled}}\\\">\\n\" +\n    \"        <button type=\\\"button\\\" style=\\\"width:100%;\\\" class=\\\"btn btn-default btn-sm\\\" ng-class=\\\"{'btn-info': dt.selected, active: isActive(dt)}\\\" ng-click=\\\"select(dt.date)\\\" ng-disabled=\\\"dt.disabled\\\" tabindex=\\\"-1\\\"><span ng-class=\\\"{'text-muted': dt.secondary, 'text-info': dt.current}\\\">{{dt.label}}</span></button>\\n\" +\n    \"      </td>\\n\" +\n    \"    </tr>\\n\" +\n    \"  </tbody>\\n\" +\n    \"</table>\\n\" +\n    \"\");\n}]);\n","template/datepicker/month.html.js":"angular.module(\"template/datepicker/month.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/datepicker/month.html\",\n    \"<table role=\\\"grid\\\" aria-labelledby=\\\"{{uniqueId}}-title\\\" aria-activedescendant=\\\"{{activeDateId}}\\\">\\n\" +\n    \"  <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"move(-1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-left\\\"></i></button></th>\\n\" +\n    \"      <th><button id=\\\"{{uniqueId}}-title\\\" role=\\\"heading\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"toggleMode()\\\" tabindex=\\\"-1\\\" style=\\\"width:100%;\\\"><strong>{{title}}</strong></button></th>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-right\\\" ng-click=\\\"move(1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-right\\\"></i></button></th>\\n\" +\n    \"    </tr>\\n\" +\n    \"  </thead>\\n\" +\n    \"  <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"row in rows track by $index\\\">\\n\" +\n    \"      <td ng-repeat=\\\"dt in row track by dt.date\\\" class=\\\"text-center\\\" role=\\\"gridcell\\\" id=\\\"{{dt.uid}}\\\" aria-disabled=\\\"{{!!dt.disabled}}\\\">\\n\" +\n    \"        <button type=\\\"button\\\" style=\\\"width:100%;\\\" class=\\\"btn btn-default\\\" ng-class=\\\"{'btn-info': dt.selected, active: isActive(dt)}\\\" ng-click=\\\"select(dt.date)\\\" ng-disabled=\\\"dt.disabled\\\" tabindex=\\\"-1\\\"><span ng-class=\\\"{'text-info': dt.current}\\\">{{dt.label}}</span></button>\\n\" +\n    \"      </td>\\n\" +\n    \"    </tr>\\n\" +\n    \"  </tbody>\\n\" +\n    \"</table>\\n\" +\n    \"\");\n}]);\n","template/datepicker/popup.html.js":"angular.module(\"template/datepicker/popup.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/datepicker/popup.html\",\n    \"<ul class=\\\"dropdown-menu\\\" ng-style=\\\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\\\" ng-keydown=\\\"keydown($event)\\\">\\n\" +\n    \"\t<li ng-transclude></li>\\n\" +\n    \"\t<li ng-if=\\\"showButtonBar\\\" style=\\\"padding:10px 9px 2px\\\">\\n\" +\n    \"\t\t<span class=\\\"btn-group pull-left\\\">\\n\" +\n    \"\t\t\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-info\\\" ng-click=\\\"select('today')\\\">{{ getText('current') }}</button>\\n\" +\n    \"\t\t\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger\\\" ng-click=\\\"select(null)\\\">{{ getText('clear') }}</button>\\n\" +\n    \"\t\t</span>\\n\" +\n    \"\t\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-success pull-right\\\" ng-click=\\\"close()\\\">{{ getText('close') }}</button>\\n\" +\n    \"\t</li>\\n\" +\n    \"</ul>\\n\" +\n    \"\");\n}]);\n","template/datepicker/year.html.js":"angular.module(\"template/datepicker/year.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/datepicker/year.html\",\n    \"<table role=\\\"grid\\\" aria-labelledby=\\\"{{uniqueId}}-title\\\" aria-activedescendant=\\\"{{activeDateId}}\\\">\\n\" +\n    \"  <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"move(-1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-left\\\"></i></button></th>\\n\" +\n    \"      <th colspan=\\\"3\\\"><button id=\\\"{{uniqueId}}-title\\\" role=\\\"heading\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"toggleMode()\\\" tabindex=\\\"-1\\\" style=\\\"width:100%;\\\"><strong>{{title}}</strong></button></th>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-right\\\" ng-click=\\\"move(1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-right\\\"></i></button></th>\\n\" +\n    \"    </tr>\\n\" +\n    \"  </thead>\\n\" +\n    \"  <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"row in rows track by $index\\\">\\n\" +\n    \"      <td ng-repeat=\\\"dt in row track by dt.date\\\" class=\\\"text-center\\\" role=\\\"gridcell\\\" id=\\\"{{dt.uid}}\\\" aria-disabled=\\\"{{!!dt.disabled}}\\\">\\n\" +\n    \"        <button type=\\\"button\\\" style=\\\"width:100%;\\\" class=\\\"btn btn-default\\\" ng-class=\\\"{'btn-info': dt.selected, active: isActive(dt)}\\\" ng-click=\\\"select(dt.date)\\\" ng-disabled=\\\"dt.disabled\\\" tabindex=\\\"-1\\\"><span ng-class=\\\"{'text-info': dt.current}\\\">{{dt.label}}</span></button>\\n\" +\n    \"      </td>\\n\" +\n    \"    </tr>\\n\" +\n    \"  </tbody>\\n\" +\n    \"</table>\\n\" +\n    \"\");\n}]);\n","template/timepicker/timepicker.html.js":"angular.module(\"template/timepicker/timepicker.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/timepicker/timepicker.html\",\n    \"<table>\\n\" +\n    \"\t<tbody>\\n\" +\n    \"\t\t<tr class=\\\"text-center\\\">\\n\" +\n    \"\t\t\t<td><a ng-click=\\\"incrementHours()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-up\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td>&nbsp;</td>\\n\" +\n    \"\t\t\t<td><a ng-click=\\\"incrementMinutes()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-up\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td ng-show=\\\"showMeridian\\\"></td>\\n\" +\n    \"\t\t</tr>\\n\" +\n    \"\t\t<tr>\\n\" +\n    \"\t\t\t<td style=\\\"width:50px;\\\" class=\\\"form-group\\\" ng-class=\\\"{'has-error': invalidHours}\\\">\\n\" +\n    \"\t\t\t\t<input type=\\\"text\\\" ng-model=\\\"hours\\\" ng-change=\\\"updateHours()\\\" class=\\\"form-control text-center\\\" ng-mousewheel=\\\"incrementHours()\\\" ng-readonly=\\\"readonlyInput\\\" maxlength=\\\"2\\\">\\n\" +\n    \"\t\t\t</td>\\n\" +\n    \"\t\t\t<td>:</td>\\n\" +\n    \"\t\t\t<td style=\\\"width:50px;\\\" class=\\\"form-group\\\" ng-class=\\\"{'has-error': invalidMinutes}\\\">\\n\" +\n    \"\t\t\t\t<input type=\\\"text\\\" ng-model=\\\"minutes\\\" ng-change=\\\"updateMinutes()\\\" class=\\\"form-control text-center\\\" ng-readonly=\\\"readonlyInput\\\" maxlength=\\\"2\\\">\\n\" +\n    \"\t\t\t</td>\\n\" +\n    \"\t\t\t<td ng-show=\\\"showMeridian\\\"><button type=\\\"button\\\" class=\\\"btn btn-default text-center\\\" ng-click=\\\"toggleMeridian()\\\">{{meridian}}</button></td>\\n\" +\n    \"\t\t</tr>\\n\" +\n    \"\t\t<tr class=\\\"text-center\\\">\\n\" +\n    \"\t\t\t<td><a ng-click=\\\"decrementHours()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-down\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td>&nbsp;</td>\\n\" +\n    \"\t\t\t<td><a ng-click=\\\"decrementMinutes()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-down\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td ng-show=\\\"showMeridian\\\"></td>\\n\" +\n    \"\t\t</tr>\\n\" +\n    \"\t</tbody>\\n\" +\n    \"</table>\\n\" +\n    \"\");\n}]);\n","template/typeahead/typeahead-match.html.js":"angular.module(\"template/typeahead/typeahead-match.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/typeahead/typeahead-match.html\",\n    \"<a tabindex=\\\"-1\\\" bind-html-unsafe=\\\"match.label | typeaheadHighlight:query\\\"></a>\");\n}]);\n","template/typeahead/typeahead-popup.html.js":"angular.module(\"template/typeahead/typeahead-popup.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/typeahead/typeahead-popup.html\",\n    \"<ul class=\\\"dropdown-menu\\\" ng-show=\\\"isOpen()\\\" ng-style=\\\"{top: position.top+'px', left: position.left+'px'}\\\" style=\\\"display: block;\\\" role=\\\"listbox\\\" aria-hidden=\\\"{{!isOpen()}}\\\">\\n\" +\n    \"    <li ng-repeat=\\\"match in matches track by $index\\\" ng-class=\\\"{active: isActive($index) }\\\" ng-mouseenter=\\\"selectActive($index)\\\" ng-click=\\\"selectMatch($index)\\\" role=\\\"option\\\" id=\\\"{{match.id}}\\\">\\n\" +\n    \"        <div typeahead-match index=\\\"$index\\\" match=\\\"match\\\" query=\\\"query\\\" template-url=\\\"templateUrl\\\"></div>\\n\" +\n    \"    </li>\\n\" +\n    \"</ul>\\n\" +\n    \"\");\n}]);\n"}}